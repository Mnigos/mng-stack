{"version":3,"sources":["../../../../../apps/api/src/thoughts/routers/thoughts.router.spec.ts"],"sourcesContent":["import type { TestingModule } from '@nestjs/testing'\nimport { Test } from '@nestjs/testing'\nimport { mock } from 'vitest-mock-extended'\nimport type { z } from 'zod'\n\nimport type { thoughtSchema } from '../thought.schema'\n\nimport { ThoughtsRouter } from './thoughts.router'\n\nimport { PrismaService } from '~/config/prisma'\n\ndescribe('ThoughtsRouter', () => {\n  let moduleRef: TestingModule\n  let thoughtsRouter: ThoughtsRouter\n  let prisma: PrismaService\n\n  beforeAll(async () => {\n    moduleRef = await Test.createTestingModule({\n      providers: [\n        ThoughtsRouter,\n        {\n          provide: PrismaService,\n          useValue: {\n            thought: {\n              findMany: vi.fn(),\n            },\n          },\n        },\n      ],\n    }).compile()\n\n    thoughtsRouter = moduleRef.get(ThoughtsRouter)\n    prisma = moduleRef.get(PrismaService)\n  })\n\n  afterAll(async () => {\n    await moduleRef.close()\n  })\n\n  test('should be defined', () => {\n    expect(thoughtsRouter).toBeDefined()\n  })\n\n  describe('all', () => {\n    test('should return all thoughts', async () => {\n      const thoughtMock = mock<z.infer<typeof thoughtSchema>>({\n        id: 'id',\n        content: 'content',\n        author: {\n          id: 'authorId',\n        },\n        createdAt: new Date(),\n      })\n\n      const thoughtFindManySpy = vi\n        .spyOn(prisma.thought, 'findMany')\n        .mockResolvedValue([thoughtMock] as any)\n\n      expect(await thoughtsRouter.all()).toEqual([thoughtMock])\n\n      expect(thoughtFindManySpy).toHaveBeenCalled()\n    })\n  })\n})\n"],"names":["describe","moduleRef","thoughtsRouter","prisma","beforeAll","Test","createTestingModule","providers","ThoughtsRouter","provide","PrismaService","useValue","thought","findMany","vi","fn","compile","get","afterAll","close","test","expect","toBeDefined","thoughtMock","mock","id","content","author","createdAt","Date","thoughtFindManySpy","spyOn","mockResolvedValue","all","toEqual","toHaveBeenCalled"],"mappings":";;;;yBACqB;oCACA;gCAKU;wBAED;AAE9BA,SAAS,kBAAkB;IACzB,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,UAAU;QACRH,YAAY,MAAMI,aAAI,CAACC,mBAAmB,CAAC;YACzCC,WAAW;gBACTC,8BAAc;gBACd;oBACEC,SAASC,qBAAa;oBACtBC,UAAU;wBACRC,SAAS;4BACPC,UAAUC,GAAGC,EAAE;wBACjB;oBACF;gBACF;aACD;QACH,GAAGC,OAAO;QAEVd,iBAAiBD,UAAUgB,GAAG,CAACT,8BAAc;QAC7CL,SAASF,UAAUgB,GAAG,CAACP,qBAAa;IACtC;IAEAQ,SAAS;QACP,MAAMjB,UAAUkB,KAAK;IACvB;IAEAC,KAAK,qBAAqB;QACxBC,OAAOnB,gBAAgBoB,WAAW;IACpC;IAEAtB,SAAS,OAAO;QACdoB,KAAK,8BAA8B;YACjC,MAAMG,cAAcC,IAAAA,wBAAI,EAAgC;gBACtDC,IAAI;gBACJC,SAAS;gBACTC,QAAQ;oBACNF,IAAI;gBACN;gBACAG,WAAW,IAAIC;YACjB;YAEA,MAAMC,qBAAqBhB,GACxBiB,KAAK,CAAC5B,OAAOS,OAAO,EAAE,YACtBoB,iBAAiB,CAAC;gBAACT;aAAY;YAElCF,OAAO,MAAMnB,eAAe+B,GAAG,IAAIC,OAAO,CAAC;gBAACX;aAAY;YAExDF,OAAOS,oBAAoBK,gBAAgB;QAC7C;IACF;AACF"}