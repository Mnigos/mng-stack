{"version":3,"sources":["../../../../../apps/api/src/thoughts/routers/thought.router.spec.ts"],"sourcesContent":["import type { TestingModule } from '@nestjs/testing'\nimport { Test } from '@nestjs/testing'\nimport { mock } from 'vitest-mock-extended'\nimport type { Thought } from '@prisma/client'\nimport type { z } from 'zod'\nimport type { MockInstance } from 'vitest'\n\nimport type { thoughtSchema } from '../thought.schema'\n\nimport { ThoughtRouter } from './thought.router'\n\nimport { PrismaService } from '~/config/prisma'\n\ndescribe('ThoughtRouter', () => {\n  const id = 'id'\n  const content = 'content'\n  const authorId = 'authorId'\n  const thoughtMock = mock<Thought>({\n    id,\n    content,\n    authorId,\n  })\n  const thoughtWithAuthorMock = mock<z.infer<typeof thoughtSchema>>({\n    id,\n    content: content,\n    author: {\n      id: authorId,\n    },\n  })\n\n  let moduleRef: TestingModule\n  let thoughtRouter: ThoughtRouter\n  let prisma: PrismaService\n\n  let thoughtFindUniqueSpy: MockInstance\n\n  beforeAll(async () => {\n    moduleRef = await Test.createTestingModule({\n      providers: [\n        ThoughtRouter,\n        {\n          provide: PrismaService,\n          useValue: {\n            thought: {\n              create: vi.fn(),\n              findUnique: vi.fn(),\n              update: vi.fn(),\n            },\n          },\n        },\n      ],\n    }).compile()\n\n    thoughtRouter = moduleRef.get(ThoughtRouter)\n    prisma = moduleRef.get(PrismaService)\n\n    thoughtFindUniqueSpy = vi.spyOn(prisma.thought, 'findUnique')\n  })\n\n  afterAll(async () => {\n    await moduleRef.close()\n  })\n\n  test('should be defined', () => {\n    expect(thoughtRouter).toBeDefined()\n  })\n\n  describe('create', () => {\n    test('should create', async () => {\n      const thoughtCreateSpy = vi\n        .spyOn(prisma.thought, 'create')\n        .mockResolvedValue(thoughtMock)\n      thoughtFindUniqueSpy.mockResolvedValue(thoughtWithAuthorMock as any)\n\n      expect(await thoughtRouter.create(content, authorId)).toEqual(\n        thoughtWithAuthorMock\n      )\n\n      expect(thoughtCreateSpy).toHaveBeenCalledWith({\n        data: {\n          content,\n          author: {\n            connect: {\n              id: authorId,\n            },\n          },\n        },\n      })\n      expect(thoughtFindUniqueSpy).toHaveBeenCalledWith({\n        where: {\n          id,\n        },\n        select: expect.anything(),\n      })\n    })\n  })\n\n  describe('edit', () => {\n    test('should edit', async () => {\n      const thoughtUpdateSpy = vi\n        .spyOn(prisma.thought, 'update')\n        .mockResolvedValue(thoughtWithAuthorMock as any)\n\n      expect(await thoughtRouter.edit(content, id)).toEqual(\n        thoughtWithAuthorMock\n      )\n\n      expect(thoughtUpdateSpy).toHaveBeenCalledWith({\n        where: {\n          id,\n        },\n        data: {\n          content,\n        },\n        select: expect.anything(),\n      })\n    })\n  })\n\n  describe('byId', () => {\n    test('should return found thought', async () => {\n      thoughtFindUniqueSpy.mockResolvedValue(thoughtMock)\n\n      expect(await thoughtRouter.byId(id)).toEqual(thoughtMock)\n\n      expect(thoughtFindUniqueSpy).toHaveBeenCalledWith({\n        where: {\n          id,\n        },\n        select: expect.anything(),\n      })\n    })\n\n    test('should throw not found error', async () => {\n      thoughtFindUniqueSpy.mockResolvedValue(null)\n\n      await expect(thoughtRouter.byId(id)).rejects.toThrowError('NOT_FOUND')\n\n      expect(thoughtFindUniqueSpy).toHaveBeenCalledWith({\n        where: {\n          id,\n        },\n        select: expect.anything(),\n      })\n    })\n  })\n})\n"],"names":["describe","id","content","authorId","thoughtMock","mock","thoughtWithAuthorMock","author","moduleRef","thoughtRouter","prisma","thoughtFindUniqueSpy","beforeAll","Test","createTestingModule","providers","ThoughtRouter","provide","PrismaService","useValue","thought","create","vi","fn","findUnique","update","compile","get","spyOn","afterAll","close","test","expect","toBeDefined","thoughtCreateSpy","mockResolvedValue","toEqual","toHaveBeenCalledWith","data","connect","where","select","anything","thoughtUpdateSpy","edit","byId","rejects","toThrowError"],"mappings":";;;;yBACqB;oCACA;+BAOS;wBAEA;AAE9BA,SAAS,iBAAiB;IACxB,MAAMC,KAAK;IACX,MAAMC,UAAU;IAChB,MAAMC,WAAW;IACjB,MAAMC,cAAcC,IAAAA,wBAAI,EAAU;QAChCJ;QACAC;QACAC;IACF;IACA,MAAMG,wBAAwBD,IAAAA,wBAAI,EAAgC;QAChEJ;QACAC,SAASA;QACTK,QAAQ;YACNN,IAAIE;QACN;IACF;IAEA,IAAIK;IACJ,IAAIC;IACJ,IAAIC;IAEJ,IAAIC;IAEJC,UAAU;QACRJ,YAAY,MAAMK,aAAI,CAACC,mBAAmB,CAAC;YACzCC,WAAW;gBACTC,4BAAa;gBACb;oBACEC,SAASC,qBAAa;oBACtBC,UAAU;wBACRC,SAAS;4BACPC,QAAQC,GAAGC,EAAE;4BACbC,YAAYF,GAAGC,EAAE;4BACjBE,QAAQH,GAAGC,EAAE;wBACf;oBACF;gBACF;aACD;QACH,GAAGG,OAAO;QAEVjB,gBAAgBD,UAAUmB,GAAG,CAACX,4BAAa;QAC3CN,SAASF,UAAUmB,GAAG,CAACT,qBAAa;QAEpCP,uBAAuBW,GAAGM,KAAK,CAAClB,OAAOU,OAAO,EAAE;IAClD;IAEAS,SAAS;QACP,MAAMrB,UAAUsB,KAAK;IACvB;IAEAC,KAAK,qBAAqB;QACxBC,OAAOvB,eAAewB,WAAW;IACnC;IAEAjC,SAAS,UAAU;QACjB+B,KAAK,iBAAiB;YACpB,MAAMG,mBAAmBZ,GACtBM,KAAK,CAAClB,OAAOU,OAAO,EAAE,UACtBe,iBAAiB,CAAC/B;YACrBO,qBAAqBwB,iBAAiB,CAAC7B;YAEvC0B,OAAO,MAAMvB,cAAcY,MAAM,CAACnB,SAASC,WAAWiC,OAAO,CAC3D9B;YAGF0B,OAAOE,kBAAkBG,oBAAoB,CAAC;gBAC5CC,MAAM;oBACJpC;oBACAK,QAAQ;wBACNgC,SAAS;4BACPtC,IAAIE;wBACN;oBACF;gBACF;YACF;YACA6B,OAAOrB,sBAAsB0B,oBAAoB,CAAC;gBAChDG,OAAO;oBACLvC;gBACF;gBACAwC,QAAQT,OAAOU,QAAQ;YACzB;QACF;IACF;IAEA1C,SAAS,QAAQ;QACf+B,KAAK,eAAe;YAClB,MAAMY,mBAAmBrB,GACtBM,KAAK,CAAClB,OAAOU,OAAO,EAAE,UACtBe,iBAAiB,CAAC7B;YAErB0B,OAAO,MAAMvB,cAAcmC,IAAI,CAAC1C,SAASD,KAAKmC,OAAO,CACnD9B;YAGF0B,OAAOW,kBAAkBN,oBAAoB,CAAC;gBAC5CG,OAAO;oBACLvC;gBACF;gBACAqC,MAAM;oBACJpC;gBACF;gBACAuC,QAAQT,OAAOU,QAAQ;YACzB;QACF;IACF;IAEA1C,SAAS,QAAQ;QACf+B,KAAK,+BAA+B;YAClCpB,qBAAqBwB,iBAAiB,CAAC/B;YAEvC4B,OAAO,MAAMvB,cAAcoC,IAAI,CAAC5C,KAAKmC,OAAO,CAAChC;YAE7C4B,OAAOrB,sBAAsB0B,oBAAoB,CAAC;gBAChDG,OAAO;oBACLvC;gBACF;gBACAwC,QAAQT,OAAOU,QAAQ;YACzB;QACF;QAEAX,KAAK,gCAAgC;YACnCpB,qBAAqBwB,iBAAiB,CAAC;YAEvC,MAAMH,OAAOvB,cAAcoC,IAAI,CAAC5C,KAAK6C,OAAO,CAACC,YAAY,CAAC;YAE1Df,OAAOrB,sBAAsB0B,oBAAoB,CAAC;gBAChDG,OAAO;oBACLvC;gBACF;gBACAwC,QAAQT,OAAOU,QAAQ;YACzB;QACF;IACF;AACF"}