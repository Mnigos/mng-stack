{"version":3,"sources":["../../../../apps/api/src/users/user.router.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from '@nestjs/testing'\nimport type { User } from '@prisma/client'\nimport { mock } from 'vitest-mock-extended'\nimport type { MockInstance } from 'vitest'\n\nimport { UsersRouter } from './user.router'\n\nimport { PrismaService } from '~/config/prisma'\n\ndescribe('UserRouter', () => {\n  const name = 'test'\n  const userMock = mock<User>({\n    name,\n  })\n\n  let moduleReference: TestingModule\n  let usersRouter: UsersRouter\n  let prisma: PrismaService\n\n  let userFindUniqueSpy: MockInstance\n\n  beforeAll(async () => {\n    moduleReference = await Test.createTestingModule({\n      providers: [\n        UsersRouter,\n        {\n          provide: PrismaService,\n          useValue: {\n            user: {\n              create: vi.fn(),\n              findUnique: vi.fn(),\n            },\n          },\n        },\n      ],\n    }).compile()\n\n    usersRouter = moduleReference.get(UsersRouter)\n    prisma = moduleReference.get(PrismaService)\n\n    userFindUniqueSpy = vi.spyOn(prisma.user, 'findUnique')\n  })\n\n  afterAll(async () => {\n    await moduleReference.close()\n  })\n\n  test('should be defined', () => {\n    expect(usersRouter).toBeDefined()\n  })\n\n  describe('login', () => {\n    let userCreateSpy: MockInstance\n\n    beforeEach(() => {\n      userCreateSpy = vi.spyOn(prisma.user, 'create')\n    })\n\n    test('should return found user', async () => {\n      userFindUniqueSpy.mockResolvedValue(userMock)\n\n      expect(await usersRouter.login(name)).toEqual(userMock)\n\n      expect(userFindUniqueSpy).toHaveBeenCalledWith({\n        where: {\n          name,\n        },\n      })\n      expect(userCreateSpy).not.toHaveBeenCalled()\n    })\n\n    test('should create account if not found', async () => {\n      userFindUniqueSpy.mockResolvedValue(null)\n      userCreateSpy.mockResolvedValue(userMock)\n\n      expect(await usersRouter.login(name)).toEqual(userMock)\n\n      expect(userFindUniqueSpy).toHaveBeenCalledWith({\n        where: {\n          name,\n        },\n      })\n      expect(userCreateSpy).toHaveBeenCalledWith({\n        data: {\n          name,\n        },\n      })\n    })\n  })\n\n  describe('byName', () => {\n    test('should return found user', async () => {\n      userFindUniqueSpy.mockResolvedValue(userMock)\n\n      expect(await usersRouter.byName(name)).toEqual(userMock)\n\n      expect(userFindUniqueSpy).toHaveBeenCalledWith({\n        where: {\n          name,\n        },\n      })\n    })\n\n    test('should throw not found error', async () => {\n      userFindUniqueSpy.mockResolvedValue(null)\n\n      await expect(usersRouter.byName(name)).rejects.toThrowError('NOT_FOUND')\n\n      expect(userFindUniqueSpy).toHaveBeenCalledWith({\n        where: {\n          name,\n        },\n      })\n    })\n  })\n})\n"],"names":["describe","name","userMock","mock","moduleReference","usersRouter","prisma","userFindUniqueSpy","beforeAll","Test","createTestingModule","providers","UsersRouter","provide","PrismaService","useValue","user","create","vi","fn","findUnique","compile","get","spyOn","afterAll","close","test","expect","toBeDefined","userCreateSpy","beforeEach","mockResolvedValue","login","toEqual","toHaveBeenCalledWith","where","not","toHaveBeenCalled","data","byName","rejects","toThrowError"],"mappings":";;;;yBAAyC;oCAEpB;4BAGO;wBAEE;AAE9BA,SAAS,cAAc;IACrB,MAAMC,OAAO;IACb,MAAMC,WAAWC,IAAAA,wBAAI,EAAO;QAC1BF;IACF;IAEA,IAAIG;IACJ,IAAIC;IACJ,IAAIC;IAEJ,IAAIC;IAEJC,UAAU;QACRJ,kBAAkB,MAAMK,aAAI,CAACC,mBAAmB,CAAC;YAC/CC,WAAW;gBACTC,uBAAW;gBACX;oBACEC,SAASC,qBAAa;oBACtBC,UAAU;wBACRC,MAAM;4BACJC,QAAQC,GAAGC,EAAE;4BACbC,YAAYF,GAAGC,EAAE;wBACnB;oBACF;gBACF;aACD;QACH,GAAGE,OAAO;QAEVhB,cAAcD,gBAAgBkB,GAAG,CAACV,uBAAW;QAC7CN,SAASF,gBAAgBkB,GAAG,CAACR,qBAAa;QAE1CP,oBAAoBW,GAAGK,KAAK,CAACjB,OAAOU,IAAI,EAAE;IAC5C;IAEAQ,SAAS;QACP,MAAMpB,gBAAgBqB,KAAK;IAC7B;IAEAC,KAAK,qBAAqB;QACxBC,OAAOtB,aAAauB,WAAW;IACjC;IAEA5B,SAAS,SAAS;QAChB,IAAI6B;QAEJC,WAAW;YACTD,gBAAgBX,GAAGK,KAAK,CAACjB,OAAOU,IAAI,EAAE;QACxC;QAEAU,KAAK,4BAA4B;YAC/BnB,kBAAkBwB,iBAAiB,CAAC7B;YAEpCyB,OAAO,MAAMtB,YAAY2B,KAAK,CAAC/B,OAAOgC,OAAO,CAAC/B;YAE9CyB,OAAOpB,mBAAmB2B,oBAAoB,CAAC;gBAC7CC,OAAO;oBACLlC;gBACF;YACF;YACA0B,OAAOE,eAAeO,GAAG,CAACC,gBAAgB;QAC5C;QAEAX,KAAK,sCAAsC;YACzCnB,kBAAkBwB,iBAAiB,CAAC;YACpCF,cAAcE,iBAAiB,CAAC7B;YAEhCyB,OAAO,MAAMtB,YAAY2B,KAAK,CAAC/B,OAAOgC,OAAO,CAAC/B;YAE9CyB,OAAOpB,mBAAmB2B,oBAAoB,CAAC;gBAC7CC,OAAO;oBACLlC;gBACF;YACF;YACA0B,OAAOE,eAAeK,oBAAoB,CAAC;gBACzCI,MAAM;oBACJrC;gBACF;YACF;QACF;IACF;IAEAD,SAAS,UAAU;QACjB0B,KAAK,4BAA4B;YAC/BnB,kBAAkBwB,iBAAiB,CAAC7B;YAEpCyB,OAAO,MAAMtB,YAAYkC,MAAM,CAACtC,OAAOgC,OAAO,CAAC/B;YAE/CyB,OAAOpB,mBAAmB2B,oBAAoB,CAAC;gBAC7CC,OAAO;oBACLlC;gBACF;YACF;QACF;QAEAyB,KAAK,gCAAgC;YACnCnB,kBAAkBwB,iBAAiB,CAAC;YAEpC,MAAMJ,OAAOtB,YAAYkC,MAAM,CAACtC,OAAOuC,OAAO,CAACC,YAAY,CAAC;YAE5Dd,OAAOpB,mBAAmB2B,oBAAoB,CAAC;gBAC7CC,OAAO;oBACLlC;gBACF;YACF;QACF;IACF;AACF"}