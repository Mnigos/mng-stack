{"version":3,"sources":["../../../../apps/api/src/users/user.router.ts"],"sourcesContent":["import { TRPCError } from '@trpc/server'\nimport { Input, Query, Router } from 'nestjs-trpc'\nimport { z } from 'zod'\n\nimport { createUserSchema, userSchema } from './user.schema'\n\nimport { PrismaService } from '~/config/prisma'\n\n@Router({ alias: 'user' })\nexport class UsersRouter {\n  constructor(private readonly prisma: PrismaService) {}\n\n  @Query({ input: createUserSchema, output: userSchema })\n  async login(@Input('name') name: string) {\n    const foundUser = await this.prisma.user.findUnique({\n      where: {\n        name,\n      },\n    })\n\n    if (foundUser) return foundUser\n\n    return this.prisma.user.create({\n      data: {\n        name,\n      },\n    })\n  }\n\n  @Query({ input: z.string(), output: userSchema })\n  async byName(@Input() name: string) {\n    const foundUser = await this.prisma.user.findUnique({\n      where: {\n        name,\n      },\n    })\n\n    if (!foundUser) throw new TRPCError({ code: 'NOT_FOUND' })\n\n    return foundUser\n  }\n}\n"],"names":["UsersRouter","constructor","prisma","login","name","foundUser","user","findUnique","where","create","data","byName","TRPCError","code","input","createUserSchema","output","userSchema","z","string","alias"],"mappings":";;;;+BASaA;;;eAAAA;;;wBATa;4BACW;qBACnB;4BAE2B;wBAEf;;;;;;;;;;;;;;;AAGvB,IAAA,AAAMA,cAAN,MAAMA;IACXC,YAAY,AAAiBC,MAAqB,CAAE;aAAvBA,SAAAA;IAAwB;IAErD,MACMC,MAAM,AAAeC,IAAY,EAAE;QACvC,MAAMC,YAAY,MAAM,IAAI,CAACH,MAAM,CAACI,IAAI,CAACC,UAAU,CAAC;YAClDC,OAAO;gBACLJ;YACF;QACF;QAEA,IAAIC,WAAW,OAAOA;QAEtB,OAAO,IAAI,CAACH,MAAM,CAACI,IAAI,CAACG,MAAM,CAAC;YAC7BC,MAAM;gBACJN;YACF;QACF;IACF;IAEA,MACMO,OAAO,AAASP,IAAY,EAAE;QAClC,MAAMC,YAAY,MAAM,IAAI,CAACH,MAAM,CAACI,IAAI,CAACC,UAAU,CAAC;YAClDC,OAAO;gBACLJ;YACF;QACF;QAEA,IAAI,CAACC,WAAW,MAAM,IAAIO,iBAAS,CAAC;YAAEC,MAAM;QAAY;QAExD,OAAOR;IACT;AACF;;;QA7BWS,OAAOC,4BAAgB;QAAEC,QAAQC,sBAAU;;;;;;;;;;;QAiB3CH,OAAOI,MAAC,CAACC,MAAM;QAAIH,QAAQC,sBAAU;;;;;;;;;;;QArBtCG,OAAO"}